package com.inetbanking.utilities;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.TestListenerAdapter;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;

public class Reporting extends TestListenerAdapter
{

	public ExtentHtmlReporter HtmlReporter;
	public ExtentReports extent;
	public ExtentTest logger;
	
	
	public void onStart(ITestContext testcontext)
	{
		String timestamp = new SimpleDateFormat("yyMMddHHmmssZ").format(new Date());
		String repname="Test-Report-"+timestamp+".html";
		HtmlReporter= new ExtentHtmlReporter(System.getProperty("user.dir")+"/test-output/"+repname);
		
	
		extent = new ExtentReports();
		extent.attachReporter(HtmlReporter);
		extent.setSystemInfo("hostname", "localhost");
		extent.setSystemInfo("OS","windows");
		extent.setSystemInfo("testername","Amrit");
		extent.setSystemInfo("Browser","chrome");
			
		HtmlReporter.config().setDocumentTitle("Inetbanking test project Report");	
		HtmlReporter.config().setReportName("Functional Report");
		HtmlReporter.config().setTheme(Theme.DARK);	
			
	}
	public void onTestSuccess(ITestResult tr)
	{
		logger=extent.createTest(tr.getName());
		logger.log(Status.PASS, "TEST CASE PASSED IS"+tr.getName());
			
	}
	
	public void onTestFailure(ITestResult tr)
	{
		logger=extent.createTest(tr.getName());
		logger.log(Status.FAIL, "TEST CASE FAILED IS"+tr.getName());
		logger.log(Status.FAIL, "TEST CASE FAILED IS"+tr.getThrowable());
		
		String screenshotpath =System.getProperty("user.dir")+"/Screenshots"+tr.getName()+".png";
		
		
		
	}
	
	
	
	
	@AfterTest
	public void endReport()
	{
		extent.flush();
	
	}
	public void setup()
	{
		System.setProperty("webdriver.chrome.driver",ReadConfig.getChromepath());
	
		
	}
	public void tearDown(ITestResult result)
	{
		if(result.getStatus()==ITestResult.FAILURE)
		{
			logger.log(Status.FAIL, "TEST CASE FAILED IS"+result.getName());
			logger.log(Status.FAIL, "TEST CASE FAILED IS"+result.getThrowable());
			Reporting r= new Reporting();
			String Screenshotpath= r.getScreenshot(driver, result.getName());
			logger.addScreenCaptureFromPath(Screenshotpath);
		}
		else if(result.getStatus()==ITestResult.SKIP)
		{
			logger.log(Status.SKIP, "TEST CASE SKIPPED IS"+result.getName());	
		}
		else if(result.getStatus()==ITestResult.SUCCESS)
		{
			logger.log(Status.PASS, "TEST CASE PASSED IS"+result.getName());	
		}
		
	}
	
	public String getScreenshot(WebDriver driver,String ScreenshotName) throws IOException
	{
		String dateName = new SimpleDateFormat("yyMMddHHmmssZ").format(new Date());
		TakesScreenshot scrShot =((TakesScreenshot)driver);
		File SrcFile=scrShot.getScreenshotAs(OutputType.FILE);
		String destination = System.getProperty("user.dir")+"/Screenshots"+ScreenshotName+dateName+".png";
        File finaldestination= new File(destination);
        FileUtils.copyFile(SrcFile, finaldestination);
        return destination;

			
	}
	
	
	
	
}
